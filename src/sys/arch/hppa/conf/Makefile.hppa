#	$OpenBSD: Makefile.hppa,v 1.7 1999/12/20 14:19:25 mickey Exp $

# Makefile for OpenBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/hppa/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/hppa/conf/Makefile.hppa
# after which config should be rerun for all machines of that type.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.

.if ${MACHINE_ARCH} != "hppa"
CROSSDIR?=     /usr/cross/hppa

.BEGIN:
	CBIN=${CROSSDIR}/usr/bin; export CBIN; \
	MACHINE="hppa" MACHINE_ARCH="hppa" AR=$$CBIN/ar AS=$$CBIN/as \
	CC=$$CBIN/cc HOSTCC=cc LD=$$CBIN/ld NM=$$CBIN/nm LORDER=$$CBIN/lorder \
	RANLIB=$$CBIN/ranlib STRIP=$$CBIN/strip SIZE=$$CBIN/size ${MAKE} ${.TARGET}

all:

.else

CC?=	cc
HOSTCC?=${CC}
LD?=	ld
MKDEP?=	mkdep
STRIP?=	strip
COPTS?=	-O2

# source tree is located via $S relative to the compilation directory
S?=	../../../..
HPPA?=	${S}/arch/hppa

INCLUDES=	-I. -I$S/arch -I$S -nostdinc
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -Dhppa
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wno-uninitialized \
		-Wno-format -Wno-main
CFLAGS=		${DEBUG} ${COPTS} ${CWARNFLAGS} -mno-space-regs \
		-mfast-indirect-calls -mportable-runtime -mno-space-regs
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
LINKFLAGS=	-T ${HPPA}/conf/ld.script -Ttext 12000 -Map bsd.map
STRIPFLAGS=	-g


.if ${IDENT:M-DDDB} != ""
CFLAGS+=	-fno-omit-frame-pointer
.endif

.if ${IDENT:M-DHP7[01]00_CPU} != ""
CFLAGS+=	-mpa-risc-1-0 -mschedule=700
.elif ${IDENT:M-DHP8*_CPU} != ""
CFLAGS+=	-mpa-risc-2-0
.else
CFLAGS+=	-mpa-risc-1-1
.endif

.if ${IDENT:M-DHP*_CPU} == ${IDENT:M-HHP7100LC_CPU}
# XXX they said gcc has bugs in 7100lc scheduling
#CFLAGS+=	-mschedule=7100LC
.endif

.if ${IDENT:M-DFPEMUL} != ""
CFLAGS+=	-msoft-float -mdisable-fpregs
.endif

HOSTED_CC=	${HOSTCC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}

### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

# compile rules: rules are named ${TYPE}_${SUFFIX} where TYPE is NORMAL or
# HOSTED}, and SUFFIX is the file suffix, capitalized (e.g. C for a .c file).

NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

HOSTED_C=	${HOSTED_CC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@rm -f $@
SYSTEM_LD=	@echo ${LD} ${LINKFLAGS} -o $@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@ ${SYSTEM_OBJ} vers.o
SYSTEM_LD_TAIL=	@${SIZE} $@; chmod 755 $@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
SYSTEM_LD_TAIL+=; \
		echo cp $@ $@.gdb; rm -f $@.gdb; cp $@ $@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@; ${STRIP} ${STRIPFLAGS} $@
.else
LINKFLAGS+=	-S
.endif

%LOAD

assym.h: $S/kern/genassym.sh ${HPPA}/hppa/genassym.cf
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${HPPA}/hppa/genassym.cf > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

ioconf.o: ioconf.c
	${NORMAL_C}

newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c


clean::
	rm -f eddep *bsd bsd.map bsd.gdb tags *.[io] [a-z]*.s \
	    [Ee]rrs linterrs makelinks assym.h

lint:
	@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ${HPPA}/hppa/swapgeneric.c ioconf.c param.c | \
	    grep -v 'static function .* unused'

tags:
	@echo "see $S/kern/Makefile for tags"

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

SRCS=	${HPPA}/hppa/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
depend:: .depend
.depend: ${SRCS} assym.h param.c
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${HPPA}/hppa/locore.S
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	-if test -n "${SFILES}"; then \
		${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}; \
	fi
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${HPPA}/hppa/genassym.cf
	@sed -e 's/.*\.o:.*\.c/assym.h:/' < assym.dep >> .depend
	@rm -f assym.dep

# depend on root or device configuration
autoconf.o conf.o: Makefile
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 

# depend on maxusers
assym.h machdep.o: Makefile

# depend on CPU configuration 
locore.o machdep.o trap.o: Makefile


locore.o: ${HPPA}/hppa/locore.S assym.h
	${NORMAL_S}

%RULES

.endif
