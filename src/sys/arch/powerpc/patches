#
#	These are diffs on my machine currently,
#	Not all of the patches are necessary,
#	some need to be determined if they are to be commited
#	or not.
#
Index: src/sbin/Makefile
# powerpc and arc use fdisk.
===================================================================
RCS file: /cvs/src/sbin/Makefile,v
retrieving revision 1.21
diff -r1.21 Makefile
35c35
< .elif ${MACHINE} == "arc"
---
> .elif (${MACHINE} == "arc") || (${MACHINE} == "powerpc")
Index: src/sbin/fdisk/fdisk.c
# powerpc uses fdisk.
# these changes make bigendian system able to use fdisk.
# the 0xA6 Needs to be resolved before checking this in.
===================================================================
RCS file: /cvs/src/sbin/fdisk/fdisk.c,v
retrieving revision 1.9
diff -r1.9 fdisk.c
124c124
< 	{ 0xA6, "OpenBSD"},
---
> 	{ 0xA6, "OpenBSD or BSD Big Endian"},
267a268,310
> static inline unsigned short
> getshort(p)
> 	void *p;
> {
> 	unsigned char *cp = p;
> 
> 	return cp[0] | (cp[1] << 8);
> }
> 
> static inline void
> putshort(p, l)
> 	void *p;
> 	unsigned short l;
> {
> 	unsigned char *cp = p;
> 
> 	*cp++ = l;
> 	*cp++ = l >> 8;
> }
> 
> static inline unsigned long
> getlong(p)
> 	void *p;
> {
> 	unsigned char *cp = p;
> 
> 	return cp[0] | (cp[1] << 8) | (cp[2] << 16) | (cp[3] << 24);
> }
> 
> static inline void
> putlong(p, l)
> 	void *p;
> 	unsigned long l;
> {
> 	unsigned char *cp = p;
> 
> 	*cp++ = l;
> 	*cp++ = l >> 8;
> 	*cp++ = l >> 16;
> 	*cp++ = l >> 24;
> }
> 
> 
283,284c326,327
< 	    partp->dp_start, partp->dp_size,
< 	    partp->dp_size * 512 / (1024 * 1024), partp->dp_flag);
---
> 	    getlong(&partp->dp_start), getlong(&partp->dp_size),
> 	    getlong(&partp->dp_size) * 512 / (1024 * 1024), partp->dp_flag);
308c351
< 	mboot.signature = BOOT_MAGIC;
---
> 	putshort(&mboot.signature, BOOT_MAGIC);
313,314c356,357
< 	partp->dp_start = start;
< 	partp->dp_size = disksectors - start;
---
> 	putlong(&partp->dp_start, start);
> 	putlong(&partp->dp_size,disksectors - start);
316c359
< 	dos(partp->dp_start,
---
> 	dos(getlong(&partp->dp_start),
318c361
< 	dos(partp->dp_start + partp->dp_size - 1,
---
> 	dos(getlong(&partp->dp_start) + getlong(&partp->dp_size) - 1,
424c467
< 		*absolute = part->dp_start;
---
> 		*absolute = getlong(&part->dp_start);
429c472,473
< 		*absolute = part->dp_start + part->dp_size - 1;
---
> 		*absolute = getlong(&part->dp_start)
> 			+ getlong(&part->dp_size) - 1;
456,457c500,501
< 		start = partp->dp_start,
< 		size = partp->dp_size;
---
> 		start = getlong(&partp->dp_start),
> 		size = getlong(&partp->dp_size);
462,463c506,507
< 		partp->dp_start = start;
< 		partp->dp_size = size;
---
> 		putlong(&partp->dp_start, start);
> 		putlong(&partp->dp_size, size);
488c532
< 			dos(partp->dp_start,
---
> 			dos(getlong(&partp->dp_start),
490c534,535
< 			dos(partp->dp_start + partp->dp_size - 1,
---
> 			dos(getlong(&partp->dp_start)
> 			    + getlong(&partp->dp_size) - 1,
650,652c695,696
< 	if (mboot.signature != BOOT_MAGIC) {
< 		fprintf(stderr,
< 		    "warning: invalid fdisk partition table found!\n");
---
> 	if (getshort(&mboot.signature) != BOOT_MAGIC) {
> 		warnx("invalid fdisk partition table found!\n");
Index: src/share/mk/bsd.prog.mk
#	Support DESTDIR compilation under elf.
#	This is needed for alpha, but not currently
#	needed for mips because they still use stabs.
===================================================================
RCS file: /cvs/src/share/mk/bsd.prog.mk,v
retrieving revision 1.7
diff -r1.7 bsd.prog.mk
14a15,19
> .if (${MACHINE_ARCH} == "powerpc")
> CRTBEGIN?=       ${DESTDIR}/usr/lib/crtbegin.o
> CRTEND?=         ${DESTDIR}/usr/lib/crtend.o
> .endif
> 
73c78
< 	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${OBJS} ${LDADD} -lgcc -lc -lgcc
---
> 	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${CRTBEGIN} ${OBJS} ${LDADD} -lgcc -lc -lgcc ${CRTEND}
Index: src/sys/kern/vfs_cache.c
# Probably a bug in the port, but this makes the system MANY TIMES
# more stablility.
===================================================================
RCS file: /cvs/src/sys/kern/vfs_cache.c,v
retrieving revision 1.2
diff -r1.2 vfs_cache.c
74a75,78
> #ifdef __powerpc__
> /* WRONG, hack for stability for now -- XXX */
> int doingcache = 0;                   /* 1 => enable the cache */
> #else
75a80
> #endif
