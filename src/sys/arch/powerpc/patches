#
#	These are diffs on my machine currently,
#	Not all of the patches are necessary,
#	some need to be determined if they are to be commited
#	or not.
#
Index: src/bin/sh/Makefile
===================================================================
RCS file: /cvs/src/bin/sh/Makefile,v
retrieving revision 1.7
diff -r1.7 Makefile
40c40
< 	${CC} ${CFLAGS} ${.CURDIR}/mknodes.c -o $@
---
> 	${HOSTCC} ${CFLAGS} ${.CURDIR}/mknodes.c -o $@
46c46
< 	${CC} ${CFLAGS} ${.CURDIR}/mksyntax.c -o $@
---
> 	${HOSTCC} ${CFLAGS} ${.CURDIR}/mksyntax.c -o $@
Index: src/gnu/usr.bin/Makefile
# perl does not build due to dynamic library requirements
# Powerpc does not yet have dynamic libaries.
===================================================================
RCS file: /cvs/src/gnu/usr.bin/Makefile,v
retrieving revision 1.18
diff -r1.18 Makefile
5c5,6
< SUBDIR+=	gzip perl rcs sdiff sendbug sort sudo
---
> SUBDIR+=	gzip rcs sdiff sendbug sort sudo
> #SUBDIR+=	gzip perl rcs sdiff sendbug sort sudo
Index: src/lib/libc/stdlib/strtod.c
#	what define should be used here,
#	port currently defines both.
===================================================================
RCS file: /cvs/src/lib/libc/stdlib/strtod.c,v
retrieving revision 1.7
diff -r1.7 strtod.c
98c98
<     defined(__ppc__)
---
>     defined(__powerpc__)
Index: src/lib/libkvm/kvm.c
#	Hackery to avoid problems with no MID_MACHINE for MID_POWERPC
===================================================================
RCS file: /cvs/src/lib/libkvm/kvm.c,v
retrieving revision 1.4
diff -r1.4 kvm.c
1c1
< /*	$OpenBSD: patches,v 1.1 1997/01/02 03:29:40 rahnds Exp $ */
---
> /*	$OpenBSD: patches,v 1.1 1997/01/02 03:29:40 rahnds Exp $ */
45c45
< static char *rcsid = "$OpenBSD: patches,v 1.1 1997/01/02 03:29:40 rahnds Exp $";
---
> static char *rcsid = "$OpenBSD: patches,v 1.1 1997/01/02 03:29:40 rahnds Exp $";
361a362
> #if #defined(__powerpc__)
368a370
> #endif
475a478
> #if !defined (__powerpc__)
477a481
> #endif
510a515
> #if !defined(__powerpc__)
511a517
> #endif
Index: src/lib/libtermlib/Makefile
#	Cross compilation issue.
===================================================================
RCS file: /cvs/src/lib/libtermlib/Makefile,v
retrieving revision 1.5
diff -r1.5 Makefile
67a68,70
> mkinfo: mkinfo.c
> 	${HOSTCC} -O -I${.CURDIR} -o mkinfo ${>}
> 
Index: src/sbin/Makefile
# powerpc and arc use fdisk.
===================================================================
RCS file: /cvs/src/sbin/Makefile,v
retrieving revision 1.21
diff -r1.21 Makefile
35c35
< .elif ${MACHINE} == "arc"
---
> .elif (${MACHINE} == "arc") || (${MACHINE} == "powerpc")
Index: src/sbin/fdisk/fdisk.c
# powerpc uses fdisk.
# these changes make bigendian system able to use fdisk.
# the 0xA6 Needs to be resolved before checking this in.
===================================================================
RCS file: /cvs/src/sbin/fdisk/fdisk.c,v
retrieving revision 1.9
diff -r1.9 fdisk.c
124c124
< 	{ 0xA6, "OpenBSD"},
---
> 	{ 0xA6, "OpenBSD or BSD Big Endian"},
267a268,310
> static inline unsigned short
> getshort(p)
> 	void *p;
> {
> 	unsigned char *cp = p;
> 
> 	return cp[0] | (cp[1] << 8);
> }
> 
> static inline void
> putshort(p, l)
> 	void *p;
> 	unsigned short l;
> {
> 	unsigned char *cp = p;
> 
> 	*cp++ = l;
> 	*cp++ = l >> 8;
> }
> 
> static inline unsigned long
> getlong(p)
> 	void *p;
> {
> 	unsigned char *cp = p;
> 
> 	return cp[0] | (cp[1] << 8) | (cp[2] << 16) | (cp[3] << 24);
> }
> 
> static inline void
> putlong(p, l)
> 	void *p;
> 	unsigned long l;
> {
> 	unsigned char *cp = p;
> 
> 	*cp++ = l;
> 	*cp++ = l >> 8;
> 	*cp++ = l >> 16;
> 	*cp++ = l >> 24;
> }
> 
> 
283,284c326,327
< 	    partp->dp_start, partp->dp_size,
< 	    partp->dp_size * 512 / (1024 * 1024), partp->dp_flag);
---
> 	    getlong(&partp->dp_start), getlong(&partp->dp_size),
> 	    getlong(&partp->dp_size) * 512 / (1024 * 1024), partp->dp_flag);
308c351
< 	mboot.signature = BOOT_MAGIC;
---
> 	putshort(&mboot.signature, BOOT_MAGIC);
313,314c356,357
< 	partp->dp_start = start;
< 	partp->dp_size = disksectors - start;
---
> 	putlong(&partp->dp_start, start);
> 	putlong(&partp->dp_size,disksectors - start);
316c359
< 	dos(partp->dp_start,
---
> 	dos(getlong(&partp->dp_start),
318c361
< 	dos(partp->dp_start + partp->dp_size - 1,
---
> 	dos(getlong(&partp->dp_start) + getlong(&partp->dp_size) - 1,
424c467
< 		*absolute = part->dp_start;
---
> 		*absolute = getlong(&part->dp_start);
429c472,473
< 		*absolute = part->dp_start + part->dp_size - 1;
---
> 		*absolute = getlong(&part->dp_start)
> 			+ getlong(&part->dp_size) - 1;
456,457c500,501
< 		start = partp->dp_start,
< 		size = partp->dp_size;
---
> 		start = getlong(&partp->dp_start),
> 		size = getlong(&partp->dp_size);
462,463c506,507
< 		partp->dp_start = start;
< 		partp->dp_size = size;
---
> 		putlong(&partp->dp_start, start);
> 		putlong(&partp->dp_size, size);
488c532
< 			dos(partp->dp_start,
---
> 			dos(getlong(&partp->dp_start),
490c534,535
< 			dos(partp->dp_start + partp->dp_size - 1,
---
> 			dos(getlong(&partp->dp_start)
> 			    + getlong(&partp->dp_size) - 1,
650,652c695,696
< 	if (mboot.signature != BOOT_MAGIC) {
< 		fprintf(stderr,
< 		    "warning: invalid fdisk partition table found!\n");
---
> 	if (getshort(&mboot.signature) != BOOT_MAGIC) {
> 		warnx("invalid fdisk partition table found!\n");
Index: src/share/mk/bsd.prog.mk
#	Support DESTDIR compilation under elf.
#	Probably needed for mips and alpha
===================================================================
RCS file: /cvs/src/share/mk/bsd.prog.mk,v
retrieving revision 1.7
diff -r1.7 bsd.prog.mk
14a15,19
> .if (${MACHINE_ARCH} == "powerpc")
> CRTBEGIN?=       ${DESTDIR}/usr/lib/crtbegin.o
> CRTEND?=         ${DESTDIR}/usr/lib/crtend.o
> .endif
> 
73c78
< 	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${OBJS} ${LDADD} -lgcc -lc -lgcc
---
> 	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${CRTBEGIN} ${OBJS} ${LDADD} -lgcc -lc -lgcc ${CRTEND}
Index: src/sys/conf/param.c
# this should not be necessary now. Need to check on this.
===================================================================
RCS file: /cvs/src/sys/conf/param.c,v
retrieving revision 1.2
diff -r1.2 param.c
1c1
< /*	$OpenBSD: patches,v 1.1 1997/01/02 03:29:40 rahnds Exp $	*/
---
> /*	$OpenBSD: patches,v 1.1 1997/01/02 03:29:40 rahnds Exp $	*/
103c103
< int	fscale = FSCALE;	/* kernel uses `FSCALE', user uses `fscale' */
---
> int	fscale __asm__ ("_fscale") = FSCALE;	/* kernel uses `FSCALE', user uses `fscale' */
Index: src/sys/kern/kern_synch.c
# this should not be necessary now. Need to check on this.
===================================================================
RCS file: /cvs/src/sys/kern/kern_synch.c,v
retrieving revision 1.5
diff -r1.5 kern_synch.c
148c148
< fixpt_t	ccpu = 0.95122942450071400909 * FSCALE;		/* exp(-1/20) */
---
> fixpt_t	ccpu __asm__ ("_ccpu") = 0.95122942450071400909 * FSCALE;		/* exp(-1/20) */
Index: src/sys/kern/vfs_cache.c
# Probably a bug in the port, but this makes the system MANY TIMES
# more stable.
===================================================================
RCS file: /cvs/src/sys/kern/vfs_cache.c,v
retrieving revision 1.2
diff -r1.2 vfs_cache.c
75c75
< int doingcache = 1;			/* 1 => enable the cache */
---
> int doingcache = 0;			/* 1 => enable the cache */
Index: src/sys/lib/libsa/Makefile
#	Powerpc port uses memset by default instead of bzero.
#	Compiler configuration.
===================================================================
RCS file: /cvs/src/sys/lib/libsa/Makefile,v
retrieving revision 1.9
diff -r1.9 Makefile
26c26
< 	printf.c strerror.c strcmp.c memset.c memcmp.c strncpy.c
---
> 	printf.c strerror.c memset.c memcmp.c strncpy.c
Index: src/sys/lib/libsa/Makefile.inc
#	Is this patch necessary, Correct???
===================================================================
RCS file: /cvs/src/sys/lib/libsa/Makefile.inc,v
retrieving revision 1.4
diff -r1.4 Makefile.inc
7c7
< SADST=	lib/sa
---
> SADST=	${.OBJDIR}/lib/sa
Index: src/sys/lib/libsa/memcpy.c
#	Ok, why did we need both...
===================================================================
RCS file: /cvs/src/sys/lib/libsa/memcpy.c,v
retrieving revision 1.3
diff -r1.3 memcpy.c
41a42,47
> #undef bcopy
> void *
> bcopy(s2, s1, n)
> {
> 	return 	memcpy(s1,s2,n);
> }
Index: src/usr.bin/lorder/lorder.sh
#	If no object in a library used a symbol from
#	another object, that second object would not
#	be included in the tsort output, This fixes
#	it with a self dependancy, why does this only
#	happen on elf or powerpc...
===================================================================
RCS file: /cvs/src/usr.bin/lorder/lorder.sh,v
retrieving revision 1.5
diff -r1.5 lorder.sh
67a68,76
> # make certian that each file is included at least once.
> # at a minimum put out a line containing "file file"
> # for each file.
> 
> for file in $*
> do
> 	echo ${file} ${file}
> done
> 
Index: src/usr.bin/xlint/lint1/param.h
#	Which is the correct define to use for the port.
===================================================================
RCS file: /cvs/src/usr.bin/xlint/lint1/param.h,v
retrieving revision 1.5
diff -r1.5 param.h
88c88
< #elif __ppc__
---
> #elif __powerpc__
